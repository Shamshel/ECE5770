//test.c

#include "OS/OS.h"
#include "OS/MPI.h"

#include "stdio.h"
#include "CUnit/Basic.h"

/*
 *
 * test functions
 *
 */

void test_OSLib()
{
  int size = 36;
    int i;
  //test memcpy
  char sourceStr[] = "abcdefghijklmnopqrstuvwxyz1234567890";
  char destStr[100];

  OS_memcpy(destStr, sourceStr, size);

  for(i = 0; i < size; i++)
    {
      CU_ASSERT(sourceStr[i] == destStr[i]);

    }

  printf("done.\n\r");

}

void test_MPI()
{
  int i;
  int rcode;

  unsigned int size = 36;
  char sourceStr[] = "abcdefghijklmnopqrstuvwxyz1234567890";

  unsigned int rcvSize = 0;
  int rcvPID = -1;
  char destStr[100];

  MPI_initialize();

  CU_ASSERT(MPI_check_available(OS_PID) == false);

  //int PID_src, int PID_dst, unsigned int size, void* data
  rcode = MPI_send_message(OS_PID, OS_PID, size, sourceStr);

  if(rcode != OS_SUCCESS)
    {
      printf("send failed with code: %d", rcode);

    }

  CU_ASSERT(MPI_check_available(OS_PID) == true);
  
  //int PID, int* PID_src, unsigned int* size, void** data
  rcode = MPI_get_message(OS_PID, &rcvPID, (void*)&rcvSize, (void*)&destStr);

  if(rcode != OS_SUCCESS)
    {
      printf("send failed with code: %d", rcode);

    }

  CU_ASSERT(rcvSize == size);

  if(rcvSize != size)
    {
      printf("message size: %d\n\r", rcvSize);

    }

  if(rcvPID == OS_PID)
    {
      printf("recieved pid: %d\n\r", rcvPID);
      
    }
  
  for(i = 0; i < size; i++)
    {
      CU_ASSERT(sourceStr[i] == destStr[i]);

    }

  CU_ASSERT(rcvPID == OS_PID);

  CU_ASSERT(MPI_check_available(OS_PID) == false);

}

int main(int argc, char** argv)
{
  CU_pSuite pSuite = NULL;

  if(CUE_SUCCESS != CU_initialize_registry())
    {
      return CU_get_error();

    }

  pSuite = CU_add_suite("OS test suite", NULL, NULL);

  if(NULL == pSuite)
    {
      CU_cleanup_registry();
      return CU_get_error();

    }

  //add tests to suite
  if(NULL == CU_add_test(pSuite, "test OSLib", test_OSLib))
    {
      CU_cleanup_registry();
      return CU_get_error();

    }

  if(NULL == CU_add_test(pSuite, "test MPI", test_MPI))
    {
      CU_cleanup_registry();
      return CU_get_error();

    }

  CU_basic_set_mode(CU_BRM_VERBOSE);
  CU_basic_run_tests();
  CU_cleanup_registry();

  return CU_get_error();

}

